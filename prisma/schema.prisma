// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model StoredCards {
  id             Int       @id @default(autoincrement())
  cardToken      String    @unique
  cardUserKey    String
  lastFourDigits String
  bankName       String
  cardAlias      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  userId         Int
  user           User      @relation(fields: [userId], references: [id], name: "UserCards")
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  surname         String
  identityNumber  String            @unique
  cardUserKey     String            @unique
  email           String            @unique
  phoneNumber     String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  storedCards     StoredCards[]     @relation(name: "UserCards")
  billingAddress  BillingAddress[]  @relation(name: "UserBillingAddress")
  shippingAddress ShippingAddress[] @relation(name: "UserShippingAddress")
  payments        Payments[]        @relation(name: "UserPayments")
}

model BillingAddress {
  id          Int        @id @default(autoincrement())
  address     String
  contactName String
  city        String
  country     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  userId      Int
  user        User       @relation(fields: [userId], references: [id], name: "UserBillingAddress")
  payments    Payments[] @relation(name: "PaymentBillingAddress")
}

model ShippingAddress {
  id          Int        @id @default(autoincrement())
  address     String
  contactName String
  city        String
  country     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  userId      Int
  user        User       @relation(fields: [userId], references: [id], name: "UserShippingAddress")
  payments    Payments[] @relation(name: "PaymentShippingAddress")
}

model Product {
  id              Int               @id @default(autoincrement())
  price           Float
  name            String
  category1       String
  itemType        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  PaymentProducts PaymentProducts[] @relation(name: "PaymentProducts")
}

model Payments {
  id                  Int                @id @default(autoincrement())
  paymentId           String             @unique
  price               Float
  paymentType         PaymentType
  paymentMethod       PaymentMethod
  createdAt           DateTime           @default(now())
  updatedAt           DateTime?          @updatedAt
  userId              Int
  user                User               @relation(fields: [userId], references: [id], name: "UserPayments")
  billingAddressId    Int
  BillingAddress      BillingAddress     @relation(fields: [billingAddressId], references: [id], name: "PaymentBillingAddress")
  shippingAddressId   Int
  ShippingAddress     ShippingAddress    @relation(fields: [shippingAddressId], references: [id], name: "PaymentShippingAddress")
  PaymentProducts     PaymentProducts[]  @relation(name: "PaymentProducts")
  paymentDirectCardId Int?
  PaymentDirectCard   PaymentDirectCard? @relation(fields: [paymentDirectCardId], references: [id], name: "PaymentDirectCardMethod")
  paymentStoredCardId Int?
  PaymentStoredCard   PaymentStoredCard? @relation(fields: [paymentStoredCardId], references: [id], name: "PaymentStoredCardMethod")
}

model PaymentProducts {
  productId Int
  Product   Product  @relation(fields: [productId], references: [id], name: "PaymentProducts")
  paymentId Int
  Payments  Payments @relation(fields: [paymentId], references: [id], name: "PaymentProducts")

  @@id([productId, paymentId])
}

model PaymentDirectCard {
  id             Int        @id @default(autoincrement())
  binNumber      String
  lastFourDigits String
  payments       Payments[] @relation(name: "PaymentDirectCardMethod")
}

model PaymentStoredCard {
  id           Int        @id @default(autoincrement())
  cardUserKey  String
  cardTokenKey String
  payments     Payments[] @relation(name: "PaymentStoredCardMethod")
}

enum PaymentType {
  ThreeDS
  NonThreeDS
}

enum PaymentMethod {
  StoredCard
  DirectCard
}
