// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model StoredCards {
  id                 Int                  @id @default(autoincrement())
  cardToken          String               @unique
  cardUserKey        String
  lastFourDigits     String
  bankName           String
  cardAlias          String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  UserStoredCards    UserStoredCards[]
  StoredCardPayments StoredCardPayments[]
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  surname            String
  identityNumber     String               @unique
  cardUserKey        String               @unique
  email              String               @unique
  phoneNumber        String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  address            UserAddress[]
  UserStoredCards    UserStoredCards[]
  Payments           Payments[]
  StoredCardPayments StoredCardPayments[]
}

model UserStoredCards {
  userId Int
  cardId Int
  user   User        @relation(fields: [userId], references: [id])
  card   StoredCards @relation(fields: [cardId], references: [id])

  @@id([userId, cardId])
}

model Addresses {
  id          Int           @id @default(autoincrement())
  type        AddressType
  address     String
  contactName String
  city        String
  country     String
  users       UserAddress[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
}

model UserAddress {
  userId    Int
  addressId Int
  user      User      @relation(fields: [userId], references: [id])
  address   Addresses @relation(fields: [addressId], references: [id])

  @@id([userId, addressId])
}

model Product {
  id                        Int                         @id @default(autoincrement())
  price                     Float
  name                      String
  category1                 String
  itemType                  String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime?                   @updatedAt
  Payments                  ProductPayments[]
  StoredCardProductPayments StoredCardProductPayments[]
}

model Payments {
  paymentId      String            @unique @id
  price          Float
  user           User              @relation(fields: [userId], references: [id])
  userId         Int
  binNumber      String
  lastFourDigits String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
  productId      ProductPayments[]
}

model StoredCardPayments {
  paymentId      String                      @unique @id
  price          Float
  user           User                        @relation(fields: [cardUserKey], references: [cardUserKey])
  cardUserKey    String
  card           StoredCards                 @relation(fields: [cardTokenKey], references: [cardToken])
  cardTokenKey   String
  binNumber      String
  lastFourDigits String
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime?                   @updatedAt
  productId      StoredCardProductPayments[]
}

model ProductPayments {
  id        Int      @id @default(autoincrement())
  productId Int
  paymentId String
  product   Product  @relation(fields: [productId], references: [id])
  payment   Payments @relation(fields: [paymentId], references: [paymentId])
}

model StoredCardProductPayments {
  id        Int                @id @default(autoincrement())
  productId Int
  paymentId String
  product   Product            @relation(fields: [productId], references: [id])
  payment   StoredCardPayments @relation(fields: [paymentId], references: [paymentId])
}

enum AddressType {
  shipping
  billing
}
